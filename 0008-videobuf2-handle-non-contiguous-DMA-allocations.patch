From be96ce1d6ada2fe196ba636859b81ed58b7b29f2 Mon Sep 17 00:00:00 2001
From: Sergey Senozhatsky <senozhatsky@chromium.org>
Date: Sat, 13 Feb 2021 13:17:28 +0900
Subject: [PATCH 8/8] videobuf2: handle non-contiguous DMA allocations

This adds support for new DMA API. New DMA API requires allocators
to have two execution branches: one for the current API, and one for
the new DMA API, which depends on
	a) dma_can_alloc_noncontiguous() support
	b) user-space non-coherent allocation request

Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
[hch: untested conversion to the ne API]
Signed-off-by: Christoph Hellwig <hch@lst.de>
---
 .../common/videobuf2/videobuf2-dma-contig.c   | 138 +++++++++++++++---
 1 file changed, 114 insertions(+), 24 deletions(-)

diff --git a/drivers/media/common/videobuf2/videobuf2-dma-contig.c b/drivers/media/common/videobuf2/videobuf2-dma-contig.c
index 9ad6d890b85a..cca89525edb4 100644
--- a/drivers/media/common/videobuf2/videobuf2-dma-contig.c
+++ b/drivers/media/common/videobuf2/videobuf2-dma-contig.c
@@ -41,8 +41,22 @@ struct vb2_dc_buf {
 	/* DMABUF related */
 	struct dma_buf_attachment	*db_attach;
 	struct vb2_buffer		*vb;
+
+	int				dma_noncontiguous:1;
 };
 
+static bool vb2_is_coherent(struct vb2_dc_buf *buf)
+{
+	/*
+	 * A simple buf->dma_noncontiguous test doesn't work in
+	 * ->prepare()/->finish() because for USERPTR buffers
+	 * ->dma_noncontiguous is cleared, which would indicated
+	 * that we can skip cache sync, but in fact we have dma_sgt
+	 * to sync.
+	 */
+	return !(buf->vb->memory == V4L2_MEMORY_MMAP && buf->dma_noncontiguous);
+}
+
 /*********************************************/
 /*        scatterlist table functions        */
 /*********************************************/
@@ -77,12 +91,18 @@ static void *vb2_dc_cookie(void *buf_priv)
 static void *vb2_dc_vaddr(void *buf_priv)
 {
 	struct vb2_dc_buf *buf = buf_priv;
-	struct dma_buf_map map;
-	int ret;
 
 	if (!buf->vaddr && buf->db_attach) {
-		ret = dma_buf_vmap(buf->db_attach->dmabuf, &map);
-		buf->vaddr = ret ? NULL : map.vaddr;
+		if (vb2_is_coherent(buf)) {
+			struct dma_buf_map map;
+
+			if (!dma_buf_vmap(buf->db_attach->dmabuf, &map))
+				buf->vaddr = map.vaddr;
+		} else {
+			buf->vaddr = dma_vmap_noncontiguous(buf->dev,
+							    buf->size,
+							    buf->dma_sgt);
+		}
 	}
 
 	return buf->vaddr;
@@ -100,9 +120,15 @@ static void vb2_dc_prepare(void *buf_priv)
 	struct vb2_dc_buf *buf = buf_priv;
 	struct sg_table *sgt = buf->dma_sgt;
 
+	/* This takes care of DMABUF and user-enforced cache sync hint */
 	if (buf->vb->no_cache_sync_on_prepare)
 		return;
 
+	/* Only for MMAP buffers */
+	if (vb2_is_coherent(buf))
+		return;
+
+	/* For both MMAP and USERPTR buffers */
 	if (!sgt)
 		return;
 
@@ -114,9 +140,15 @@ static void vb2_dc_finish(void *buf_priv)
 	struct vb2_dc_buf *buf = buf_priv;
 	struct sg_table *sgt = buf->dma_sgt;
 
+	/* This takes care of DMABUF and user-enforced cache sync hint */
 	if (buf->vb->no_cache_sync_on_finish)
 		return;
 
+	/* Only for MMAP buffers */
+	if (vb2_is_coherent(buf))
+		return;
+
+	/* For both MMAP and USERPTR buffers */
 	if (!sgt)
 		return;
 
@@ -127,6 +159,22 @@ static void vb2_dc_finish(void *buf_priv)
 /*        callbacks for MMAP buffers         */
 /*********************************************/
 
+static void __vb2_dc_put(struct vb2_dc_buf *buf)
+{
+	struct vb2_queue *q = buf->vb->vb2_queue;
+
+	if (vb2_is_coherent(buf)) {
+		dma_free_attrs(buf->dev, buf->size, buf->cookie,
+			       buf->dma_addr, q->dma_attrs);
+		return;
+	}
+
+	if (buf->vaddr)
+		dma_vunmap_noncontiguous(buf->dev, buf->vaddr);
+	dma_free_noncontiguous(buf->dev, buf->size,
+			       buf->dma_sgt, buf->dma_addr);
+}
+
 static void vb2_dc_put(void *buf_priv)
 {
 	struct vb2_dc_buf *buf = buf_priv;
@@ -138,12 +186,53 @@ static void vb2_dc_put(void *buf_priv)
 		sg_free_table(buf->sgt_base);
 		kfree(buf->sgt_base);
 	}
-	dma_free_attrs(buf->dev, buf->size, buf->cookie, buf->dma_addr,
-		       buf->attrs);
+	__vb2_dc_put(buf);
 	put_device(buf->dev);
 	kfree(buf);
 }
 
+static int __vb2_dc_alloc(struct vb2_dc_buf *buf)
+{
+	struct vb2_queue *q = buf->vb->vb2_queue;
+
+	if (!q->non_consistent_mem) {
+		buf->cookie = dma_alloc_attrs(buf->dev,
+					      buf->size,
+					      &buf->dma_addr,
+					      GFP_KERNEL | q->gfp_flags,
+					      q->dma_attrs);
+		if (!buf->cookie)
+			return -ENOMEM;
+		if ((q->dma_attrs & DMA_ATTR_NO_KERNEL_MAPPING) == 0)
+			buf->vaddr = buf->cookie;
+		return 0;
+	}
+
+	buf->dma_noncontiguous = 1;
+	buf->dma_sgt = dma_alloc_noncontiguous(buf->dev,
+					       buf->size,
+					       buf->dma_dir,
+					       GFP_KERNEL | q->gfp_flags);
+	if (!buf->dma_sgt)
+		return -ENOMEM;
+
+	if (q->dma_attrs & DMA_ATTR_NO_KERNEL_MAPPING)
+		return 0;
+
+	buf->vaddr = dma_vmap_noncontiguous(buf->dev, buf->size, buf->dma_sgt);
+	if (!buf->vaddr)
+		goto err;
+	return 0;
+
+err:
+	dma_free_noncontiguous(buf->dev,
+			       buf->size,
+			       buf->dma_sgt,
+			       buf->dma_addr);
+	buf->dma_sgt = NULL;
+	return -ENOMEM;
+}
+
 static void *vb2_dc_alloc(struct vb2_buffer *vb,
 			  struct device *dev,
 			  unsigned long size)
@@ -158,27 +247,22 @@ static void *vb2_dc_alloc(struct vb2_buffer *vb,
 		return ERR_PTR(-ENOMEM);
 
 	buf->attrs = vb->vb2_queue->dma_attrs;
-	buf->cookie = dma_alloc_attrs(dev, size, &buf->dma_addr,
-				      GFP_KERNEL | vb->vb2_queue->gfp_flags,
-				      buf->attrs);
-	if (!buf->cookie) {
-		dev_err(dev, "dma_alloc_coherent of size %ld failed\n", size);
-		kfree(buf);
-		return ERR_PTR(-ENOMEM);
-	}
-
-	if ((buf->attrs & DMA_ATTR_NO_KERNEL_MAPPING) == 0)
-		buf->vaddr = buf->cookie;
+	buf->dma_dir = vb->vb2_queue->dma_dir;
+	buf->vb = vb;
 
+	buf->size = size;
 	/* Prevent the device from being released while the buffer is used */
 	buf->dev = get_device(dev);
-	buf->size = size;
-	buf->dma_dir = vb->vb2_queue->dma_dir;
+
+	if (__vb2_dc_alloc(buf)) {
+		dev_err(dev, "dma alloc of size %ld failed\n", size);
+		kfree(buf);
+		return ERR_PTR(-ENOMEM);
+	}
 
 	buf->handler.refcount = &buf->refcount;
 	buf->handler.put = vb2_dc_put;
 	buf->handler.arg = buf;
-	buf->vb = vb;
 
 	refcount_set(&buf->refcount, 1);
 
@@ -195,9 +279,12 @@ static int vb2_dc_mmap(void *buf_priv, struct vm_area_struct *vma)
 		return -EINVAL;
 	}
 
-	ret = dma_mmap_attrs(buf->dev, vma, buf->cookie,
-		buf->dma_addr, buf->size, buf->attrs);
-
+	if (vb2_is_coherent(buf))
+		ret = dma_mmap_attrs(buf->dev, vma, buf->cookie, buf->dma_addr,
+				     buf->size, buf->attrs);
+	else
+		ret = dma_mmap_noncontiguous(buf->dev, vma, buf->size,
+					     buf->dma_sgt);
 	if (ret) {
 		pr_err("Remapping memory failed, error: %d\n", ret);
 		return ret;
@@ -389,6 +476,9 @@ static struct sg_table *vb2_dc_get_base_sgt(struct vb2_dc_buf *buf)
 	int ret;
 	struct sg_table *sgt;
 
+	if (!vb2_is_coherent(buf))
+		return buf->dma_sgt;
+
 	sgt = kmalloc(sizeof(*sgt), GFP_KERNEL);
 	if (!sgt) {
 		dev_err(buf->dev, "failed to alloc sg table\n");
@@ -396,7 +486,7 @@ static struct sg_table *vb2_dc_get_base_sgt(struct vb2_dc_buf *buf)
 	}
 
 	ret = dma_get_sgtable_attrs(buf->dev, sgt, buf->cookie, buf->dma_addr,
-		buf->size, buf->attrs);
+				    buf->size, buf->attrs);
 	if (ret < 0) {
 		dev_err(buf->dev, "failed to get scatterlist from DMA API\n");
 		kfree(sgt);
-- 
2.30.1

